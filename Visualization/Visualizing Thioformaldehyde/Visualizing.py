# -*- coding: utf-8 -*-
"""
Created on Wed May 31 15:08:00 2023

@author: Max Hilt
"""

# Importing libraries
import numpy as np
import matplotlib.pyplot as plt

plt.close('all')

def co_bondlength_convergence(filename_ground, filename_excited):
    
    '''
    INPUTS
    
    OUPUTS
        None

    This function plots how the gradient descent algorithm finds the bondlengths.
    And it compares this with the bondlengths calculated by the previous method.
    Which simply did a lot of simulations upfront and afterwards searched for the minima.
    
    '''
    # Loading the data
    ground_state = np.load(filename_ground)
    excited_state = np.load(filename_excited)
    
    x_tick_list = [0,5,10,15,20]
    
    # Creating the figure
    plt.figure()
    plt.title('Convergence gradient descent algorithm with B3LYP and pV5Z')
    plt.plot(range(len(ground_state)), ground_state, '.', label='Ground-state gradient descent')
    plt.plot(range(len(excited_state)), excited_state, '.', label='First-excited state gradient descent')
    
    # We also plot horizontal lines for the previous results we found for B3LYP and pV5Z
    plt.axhline(y = 1.123308271, color = 'C0', linestyle = '--', label='Ground-state original method')
    plt.axhline(y = 1.23859649122807, color = 'C1', linestyle = '--', label='First-excited state original method')
    
    # Finally we set the axislabels and print the legend
    plt.legend()
    plt.xticks(x_tick_list)
    plt.xlabel('Iteration')
    plt.ylabel('Bond length [$\AA$]')
    
    return

def path_energies(filename):
    '''
    INPUTS
        filename: str
            This is the filename for the .npy file generated by the simulation with all the
            groundstate and excited state energies as a function of iteration.
    OUTPUTS
        None
    
    This function shows the path energies encountered by the gradient descent algorithm.
    As a function of what iteration it is on
    
    '''
    
    data = np.load(filename)
    
    # Creating the plot with only the energy of the groundstate
    plt.figure()
    plt.title('Path energies')
    plt.plot(data[:,0], '.')
    plt.xlabel('Iteration')
    plt.ylabel('Energy [eV]')
    
    # Creating the plot with the energy of the groundstate and excited states
    plt.figure()
    plt.title('Excited energies')
    for i in range(np.shape(data)[1]):
        if i != 0:
            data[:,i] = data[:,i] + data[:,0]
        plt.plot(data[:,i], '.', label = f'Energy {i}')
    plt.legend()
    plt.xlabel('Iteration')
    plt.ylabel('Energy [eV]')


path_energies('CO_excited1_pathenergies.npy')
co_bondlength_convergence('CO_groundstate_bondlength.npy','CO_excited1_bondlength.npy')